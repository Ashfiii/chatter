{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-coding-challenges-master\\\\chatter\\\\src\\\\components\\\\Messages\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useContext } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages';\nimport TypingMessage from './TypingMessage';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\nimport '../styles/_messages.scss';\nimport initialBottyMsg from '../../../common/constants/initialBottyMessage'; // const client = 'client';\n// const botty = 'botty';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket']\n});\nconst initial_msg = {\n  message: initialBottyMsg,\n  user: botty\n};\n\nfunction scrollToBottom() {\n  const msgs = document.querySelector(\"#message-list\");\n  msgs.scrollTop = msgs.scrollHeight;\n}\n\nfunction Messages() {\n  _s();\n\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const {\n    setLatestMessage\n  } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([initial_msg]);\n  const [botTyping, setBotTyping] = useState(false);\n  useEffect(() => {\n    socket.on('bot-message', message => {\n      setMessages([...messages, {\n        message,\n        user: botty\n      }]);\n      setBotTyping(false);\n      playReceive();\n      scrollToBottom();\n    });\n  }, [messages]);\n  useEffect(() => {\n    socket.on('bot-typing', () => {\n      setBotTyping(true);\n    });\n  }, []);\n\n  const onChangeMessage = event => {\n    setMessage(event.target.value);\n  };\n\n  const sendMessage = useCallback(() => {\n    if (!message) {\n      return false;\n    }\n\n    setMessages([...messages, {\n      message,\n      user: client\n    }]);\n    playSend();\n    socket.emit('user-message', message);\n    scrollToBottom();\n    setMessage('');\n    document.querySelector(\"#user-message-input\").value = '';\n  }, [messages, message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages__list\",\n      id: \"message-list\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        nextMessage: messages[index + 1],\n        message: msg,\n        botTyping: botTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)), botTyping ? /*#__PURE__*/_jsxDEV(TypingMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 22\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      message: message,\n      sendMessage: sendMessage,\n      onChangeMessage: onChangeMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messages, \"3yS+nWRsiAH45xgXfeNt+EjZeNw=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["D:/React/react-coding-challenges-master/chatter/src/components/Messages/components/Messages.js"],"names":["React","useState","useEffect","useCallback","useContext","io","useSound","config","LatestMessagesContext","TypingMessage","Header","Footer","Message","initialBottyMsg","socket","BOT_SERVER_ENDPOINT","transports","initial_msg","message","user","botty","scrollToBottom","msgs","document","querySelector","scrollTop","scrollHeight","Messages","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","setLatestMessage","setMessage","messages","setMessages","botTyping","setBotTyping","on","onChangeMessage","event","target","value","sendMessage","client","emit","map","msg","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages';\nimport TypingMessage from './TypingMessage';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\nimport '../styles/_messages.scss';\nimport initialBottyMsg from '../../../common/constants/initialBottyMessage';\n\n// const client = 'client';\n// const botty = 'botty';\n\nconst socket = io(\n  config.BOT_SERVER_ENDPOINT,\n  { transports: ['websocket', 'polling', 'flashsocket'] }\n);\n\nconst initial_msg = {\n  message: initialBottyMsg,\n  user: botty\n};\n\nfunction scrollToBottom(){\n  const msgs = document.querySelector(\"#message-list\");\n  msgs.scrollTop = msgs.scrollHeight;\n}\n\nfunction Messages() {\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const { setLatestMessage } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([initial_msg]);\n  const [botTyping, setBotTyping] = useState(false);\n\n  useEffect(() => {\n    socket.on('bot-message', (message) => {\n      setMessages([\n        ...messages,\n        {message, user: botty}\n      ]);\n\n      setBotTyping(false);\n\n      playReceive();\n\n      scrollToBottom();\n    });\n  }, [messages]);\n\n  useEffect(()=>{\n    socket.on('bot-typing', () => {\n      setBotTyping(true);\n    });\n  }, []);\n\n  const onChangeMessage = (event) => {\n    setMessage(event.target.value)\n  };\n\n  const sendMessage = useCallback(() => {\n    if (!message) {\n       return false; \n      }\n\n    setMessages([...messages, {message, user: client}]);\n\n    playSend();\n\n    socket.emit('user-message', message);\n\n    scrollToBottom();    \n\n    setMessage('');\n\n    \n\n    document.querySelector(\"#user-message-input\").value = '';\n  }, [messages, message]);\n\n  return (\n    <div className=\"messages\">\n      <Header />\n      <div className=\"messages__list\" id=\"message-list\">\n        {messages.map((msg, index)=>(\n            <Message nextMessage={messages[index + 1]} message={msg} botTyping={botTyping} />\n          ))}\n        {botTyping ? <TypingMessage /> : null}\n      </div>\n      <Footer message={message} sendMessage={sendMessage} onChangeMessage={onChangeMessage} />\n    </div>\n  );\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}