{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-coding-challenges-master\\\\chatter\\\\src\\\\components\\\\Messages\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages';\nimport TypingMessage from './TypingMessage';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\nimport '../styles/_messages.scss';\nimport initial_botty_msg from '../../../common/constants/initialBottyMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst enduser = 'enduser';\nconst chatbot = 'chatbot';\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: ['websocket', 'polling', 'flashsocket']\n});\nconst initial_msg = {\n  message: initial_botty_msg,\n  id: Date.now(),\n  user: chatbot\n};\n\nfunction msgToBottom() {\n  const msgList = document.querySelector(\"#message-list\");\n  window.scrollTo(0, msgList.innerHeight);\n}\n\nfunction Messages() {\n  _s();\n\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const {\n    setLatestMessage\n  } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([initial_msg]);\n  const [botTyping, setBotTyping] = useState(false);\n  useEffect(() => {\n    // socket.off('bot-message');\n    socket.on('bot-message', message => {\n      setBotTyping(false);\n      setMessages([...messages, {\n        message,\n        user: chatbot,\n        id: Date.now()\n      }]);\n      setLatestMessage(chatbot, message); //playReceive();\n\n      msgToBottom();\n    });\n  }, [messages]);\n  useEffect(() => {\n    msgToBottom();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages__list\",\n      id: \"message-list\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        nextMessage: messages[index + 1],\n        message: msg,\n        botTyping: botTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)), botTyping ? /*#__PURE__*/_jsxDEV(TypingMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 24\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      message: message,\n      sendMessage: sendMessage,\n      onChangeMessage: onChangeMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messages, \"sAO9K55aKnxGvScWW+0lwYGnjL0=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["D:/React/react-coding-challenges-master/chatter/src/components/Messages/components/Messages.js"],"names":["React","useContext","io","useSound","config","LatestMessagesContext","TypingMessage","Header","Footer","Message","initial_botty_msg","enduser","chatbot","socket","BOT_SERVER_ENDPOINT","transports","initial_msg","message","id","Date","now","user","msgToBottom","msgList","document","querySelector","window","scrollTo","innerHeight","Messages","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","setLatestMessage","setMessage","useState","messages","setMessages","botTyping","setBotTyping","useEffect","on","map","msg","index","sendMessage","onChangeMessage"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\nimport config from '../../../config';\nimport LatestMessagesContext from '../../../contexts/LatestMessages/LatestMessages';\nimport TypingMessage from './TypingMessage';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\nimport '../styles/_messages.scss';\nimport initial_botty_msg from '../../../common/constants/initialBottyMessage';\n\nconst enduser = 'enduser';\nconst chatbot = 'chatbot';\n\nconst socket = io(\n  config.BOT_SERVER_ENDPOINT,\n  { transports: ['websocket', 'polling', 'flashsocket'] }\n);\n\nconst initial_msg = {\n  message: initial_botty_msg,\n  id: Date.now(),\n  user: chatbot\n};\n\nfunction msgToBottom(){\n  const msgList = document.querySelector(\"#message-list\");\n  window.scrollTo(0, msgList.innerHeight);\n}\n\nfunction Messages() {\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const { setLatestMessage } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([initial_msg]);\n  const [botTyping, setBotTyping] = useState(false);\n\n  useEffect(() => {\n    // socket.off('bot-message');\n    socket.on('bot-message', (message) => {\n      setBotTyping(false);\n\n      setMessages([...messages, { message, user: chatbot, id: Date.now() }]);\n\n      setLatestMessage(chatbot, message);\n\n      //playReceive();\n\n      msgToBottom();\n    });\n\n  }, [messages]);\n\n  useEffect(()=>{\n    msgToBottom();\n  }, []);\n\n  return (\n    <div className=\"messages\">\n      <Header />\n      <div className=\"messages__list\" id=\"message-list\">\n        {messages.map((msg, index) => (\n            <Message nextMessage={messages[index + 1]} message={msg} botTyping={botTyping} />\n          ))}\n          {botTyping ? <TypingMessage /> : null}\n      </div>\n      <Footer message={message} sendMessage={sendMessage} onChangeMessage={onChangeMessage} />\n    </div>\n  );\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}